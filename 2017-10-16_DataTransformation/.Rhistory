state.mean <- apply(jmod$sims.list$state,2,mean); state.mean[1:5]
state.se <- apply(jmod$sims.list$state,2,sd)/sqrt(nrow(jmod$sims.list$state)); state.se[1:5]
points(-jmod$q50$d[ind.range], col=state.mode[ind.range], pch=16) # mean state est
#points(-jmod$q50$d[ind.range], col=3, pch=16) # mean state est
pnorm.up <- pnorm.lo <- dev <- cont <- stand.values <- 0
#for (k in 1:ndives){
for (t in 1:(sum(length.ssm.ind))){
#t <- 1
cont[t] <- ifelse(jmod$q50$d[t] < as.numeric(lo.up[t,2]) && jmod$q50$d[t] > as.numeric(lo.up[t,1]), 1, 0)
pnorm.up[t] <- pnorm(as.numeric(lo.up[t,2]), jmod$q50$d[t], sqrt(1/(jmod$q50$tau[jmod$q50$state[t]]/tau.adjustment))) # density of normal at lo.up[t,2]
pnorm.lo[t] <- pnorm(as.numeric(lo.up[t,1]), jmod$q50$d[t], sqrt(1/(jmod$q50$tau[jmod$q50$state[t]]/tau.adjustment))) # density of normal at lo.up[t,2]
dev[t] <- -2*log(pnorm.up[t]-pnorm.lo[t])
stand.values[t] <- (lo.up[t,2]-jmod$q50$dproj[t])/sqrt(1/(jmod$q50$tau[jmod$q50$state[t]]/tau.adjustment))
# the signed number of standard deviations an observation is above the mean
}
#}
# FULL MODEL
length(dive.names) # number of dives
table(dev!=Inf)
sum(dev[dev!=Inf]) # 1526.301
pD <- var(dev[dev!=Inf])/2; pD # 0.3791829
DIC <- sum(dev[dev!=Inf]) + 2*pD; DIC
# [1] 1527.059 on MacBook // 1527.059 o
names(jmod$n.eff)
n.eff.ls <- vector("list")
for(i in 1:length(names(jmod$n.eff))){
if(is.matrix(jmod$n.eff[[i]])){
n.eff.ls[[i]] <- jmod$n.eff[[i]]
} else {
n.eff.ls[[i]] <- summary(jmod$n.eff[[i]])
}
}
names(n.eff.ls) <- names(jmod$n.eff)
n.eff.ls$betazero
i <- 9; j <- 20
ind.range <- c(tstart[i]:(tstart[j]-1))
par(mfrow=c(2,1), mar=c(4,4,1,1))
plot(jmod$q50$m[1,ind.range], type="l", ylim=c(0,1), col=1) # P(descent)
lines(jmod$q50$m[2,ind.range],col=2) # P(bottom)
lines(jmod$q50$m[3,ind.range], col=3) # P(ascent)
plot(-jmod$q50$d[ind.range], type="l") # depth profile
# working out the modal state
find.mode <- function(cc){
sort.int(c(sum(cc==1),sum(cc==2),sum(cc==3)),decreasing=TRUE,index.return=TRUE)$ix[1]
} # Thank you to Ian Durbach for help with this function 20151014
state.mode <- apply(jmod$sims.list$state,2,find.mode)
state.mean <- apply(jmod$sims.list$state,2,mean); state.mean[1:5]
state.se <- apply(jmod$sims.list$state,2,sd)/sqrt(nrow(jmod$sims.list$state)); state.se[1:5]
points(-jmod$q50$d[ind.range], col=state.mode[ind.range], pch=16) # mean state est
#points(-jmod$q50$d[ind.range], col=3, pch=16) # mean state est
i <- 50; j <- 60
ind.range <- c(tstart[i]:(tstart[j]-1))
par(mfrow=c(2,1), mar=c(4,4,1,1))
plot(jmod$q50$m[1,ind.range], type="l", ylim=c(0,1), col=1) # P(descent)
lines(jmod$q50$m[2,ind.range],col=2) # P(bottom)
lines(jmod$q50$m[3,ind.range], col=3) # P(ascent)
plot(-jmod$q50$d[ind.range], type="l") # depth profile
# working out the modal state
find.mode <- function(cc){
sort.int(c(sum(cc==1),sum(cc==2),sum(cc==3)),decreasing=TRUE,index.return=TRUE)$ix[1]
} # Thank you to Ian Durbach for help with this function 20151014
state.mode <- apply(jmod$sims.list$state,2,find.mode)
state.mean <- apply(jmod$sims.list$state,2,mean); state.mean[1:5]
state.se <- apply(jmod$sims.list$state,2,sd)/sqrt(nrow(jmod$sims.list$state)); state.se[1:5]
points(-jmod$q50$d[ind.range], col=state.mode[ind.range], pch=16) # mean state est
#points(-jmod$q50$d[ind.range], col=3, pch=16) # mean state est
load("/Users/theoniphotopoulou/Dropbox/PUBLICATIONS/04Movement ecology of air breathing divers/squid_server/jmod.b0.RData")
ls()
jmod.b01 <- jmod
jmod <- jmod.b0
jmod$mcmc.info$elapsed.mins/60 # 254.3294 hours
table(jmod$q50$state)
i <- 50; j <- 60
ind.range <- c(tstart[i]:(tstart[j]-1))
par(mfrow=c(2,1), mar=c(4,4,1,1))
plot(jmod$q50$m[1,ind.range], type="l", ylim=c(0,1), col=1) # P(descent)
lines(jmod$q50$m[2,ind.range],col=2) # P(bottom)
lines(jmod$q50$m[3,ind.range], col=3) # P(ascent)
plot(-jmod$q50$d[ind.range], type="l") # depth profile
# working out the modal state
find.mode <- function(cc){
sort.int(c(sum(cc==1),sum(cc==2),sum(cc==3)),decreasing=TRUE,index.return=TRUE)$ix[1]
} # Thank you to Ian Durbach for help with this function 20151014
state.mode <- apply(jmod$sims.list$state,2,find.mode)
state.mean <- apply(jmod$sims.list$state,2,mean); state.mean[1:5]
state.se <- apply(jmod$sims.list$state,2,sd)/sqrt(nrow(jmod$sims.list$state)); state.se[1:5]
points(-jmod$q50$d[ind.range], col=state.mode[ind.range], pch=16) # mean state est
#points(-jmod$q50$d[ind.range], col=3, pch=16) # mean state est
pnorm.up <- pnorm.lo <- dev <- cont <- stand.values <- 0
#for (k in 1:ndives){
for (t in 1:(sum(length.ssm.ind))){
#t <- 1
cont[t] <- ifelse(jmod$q50$d[t] < as.numeric(lo.up[t,2]) && jmod$q50$d[t] > as.numeric(lo.up[t,1]), 1, 0)
pnorm.up[t] <- pnorm(as.numeric(lo.up[t,2]), jmod$q50$d[t], sqrt(1/(jmod$q50$tau[jmod$q50$state[t]]/tau.adjustment))) # density of normal at lo.up[t,2]
pnorm.lo[t] <- pnorm(as.numeric(lo.up[t,1]), jmod$q50$d[t], sqrt(1/(jmod$q50$tau[jmod$q50$state[t]]/tau.adjustment))) # density of normal at lo.up[t,2]
dev[t] <- -2*log(pnorm.up[t]-pnorm.lo[t])
stand.values[t] <- (lo.up[t,2]-jmod$q50$dproj[t])/sqrt(1/(jmod$q50$tau[jmod$q50$state[t]]/tau.adjustment))
# the signed number of standard deviations an observation is above the mean
}
#}
length(dive.names) # number of dives
table(dev!=Inf)
sum(dev[dev!=Inf]) # 1526.301
pD <- var(dev[dev!=Inf])/2; pD # 0.3791829
DIC <- sum(dev[dev!=Inf]) + 2*pD; DIC
# [1] 1527.059 on MacBook // 1527.059 on server
plot(-jmod$q50$d[ind.range], type="l")
points(-jmod$q50$d[ind.range], col=state.mode[ind.range], pch=16)
load("/Users/theoniphotopoulou/Dropbox/PUBLICATIONS/04Movement ecology of air breathing divers/squid_server/jmod.b0123.RData")
ls()
jmod <- jmod.b0123
jmod$mcmc.info$elapsed.mins/60 # 254.3294 hours
table(jmod$q50$state)
unique(as.vector(unlist(jmod$sims.list$state)))
table(as.vector(unlist(jmod$sims.list$state)))
names(jmod$q50)
names(jmod)
names(jmod$samples)
dim(jmod$samples)
length(jmod$samples)
str(jmod$samples)
jmod$summary
str(jmod$summary)
names(jmod)
str(jmod$sims.list)
str(jmod$overlap0)
names(jmod)
str(jmod$f)
names(jmod)
str(jmod$modfile)
str(jmod$model)
str(jmod$parameters)
str(jmod$mcmc.info)
jmod$mcmc.info$elapsed.mins/3600
jmod$mcmc.info$elapsed.mins/60
names(jmod)
jmod$run.date
str(jmod$bugs.format)
jmod$mcmc.info$elapsed.mins/60 # 254.3294 hours
jmod$mcmc.info$elapsed.mins/3600 # 254.3294 hours
names(jmod$q50)
head(jmod$q50$stdd, n=100)
head(jmod$q50$stdd2, n=100)
quartz()
i <- 1; j <- 20
ind.range <- c(tstart[i]:(tstart[j]-1))
par(mfrow=c(2,1), mar=c(4,4,1,1))
plot(jmod$q50$m[1,ind.range], type="l", ylim=c(0,1), col=1) # P(descent)
lines(jmod$q50$m[2,ind.range],col=2) # P(bottom)
lines(jmod$q50$m[3,ind.range], col=3) # P(ascent)
plot(-jmod$q50$d[ind.range], type="l") # depth profile
# working out the modal state
find.mode <- function(cc){
sort.int(c(sum(cc==1),sum(cc==2),sum(cc==3)),decreasing=TRUE,index.return=TRUE)$ix[1]
} # Thank you to Ian Durbach for help with this function 20151014
state.mode <- apply(jmod$sims.list$state,2,find.mode)
state.mean <- apply(jmod$sims.list$state,2,mean); state.mean[1:5]
state.se <- apply(jmod$sims.list$state,2,sd)/sqrt(nrow(jmod$sims.list$state)); state.se[1:5]
load("/Users/theoniphotopoulou/Dropbox/PUBLICATIONS/04Movement ecology of air breathing divers/squid_server/data_for_squid.RData")
quartz()
i <- 1; j <- 20
ind.range <- c(tstart[i]:(tstart[j]-1))
par(mfrow=c(2,1), mar=c(4,4,1,1))
plot(jmod$q50$m[1,ind.range], type="l", ylim=c(0,1), col=1) # P(descent)
lines(jmod$q50$m[2,ind.range],col=2) # P(bottom)
lines(jmod$q50$m[3,ind.range], col=3) # P(ascent)
plot(-jmod$q50$d[ind.range], type="l") # depth profile
# working out the modal state
find.mode <- function(cc){
sort.int(c(sum(cc==1),sum(cc==2),sum(cc==3)),decreasing=TRUE,index.return=TRUE)$ix[1]
} # Thank you to Ian Durbach for help with this function 20151014
state.mode <- apply(jmod$sims.list$state,2,find.mode)
state.mean <- apply(jmod$sims.list$state,2,mean); state.mean[1:5]
state.se <- apply(jmod$sims.list$state,2,sd)/sqrt(nrow(jmod$sims.list$state)); state.se[1:5]
points(-jmod$q50$d[ind.range], col=state.mode[ind.range], pch=16) # mean state est
#points(-jmod$q50$d[ind.range], col=3, pch=16) # mean state est
pnorm.up <- pnorm.lo <- dev <- cont <- stand.values <- 0
#for (k in 1:ndives){
for (t in 1:(sum(length.ssm.ind))){
#t <- 1
cont[t] <- ifelse(jmod$q50$d[t] < as.numeric(lo.up[t,2]) && jmod$q50$d[t] > as.numeric(lo.up[t,1]), 1, 0)
pnorm.up[t] <- pnorm(as.numeric(lo.up[t,2]), jmod$q50$d[t], sqrt(1/(jmod$q50$tau[jmod$q50$state[t]]/tau.adjustment))) # density of normal at lo.up[t,2]
pnorm.lo[t] <- pnorm(as.numeric(lo.up[t,1]), jmod$q50$d[t], sqrt(1/(jmod$q50$tau[jmod$q50$state[t]]/tau.adjustment))) # density of normal at lo.up[t,2]
dev[t] <- -2*log(pnorm.up[t]-pnorm.lo[t])
stand.values[t] <- (lo.up[t,2]-jmod$q50$dproj[t])/sqrt(1/(jmod$q50$tau[jmod$q50$state[t]]/tau.adjustment))
# the signed number of standard deviations an observation is above the mean
}
#}
# FULL MODEL
length(dive.names) # number of dives
table(dev!=Inf)
sum(dev[dev!=Inf]) # 1526.301
pD <- var(dev[dev!=Inf])/2; pD # 0.3791829
DIC <- sum(dev[dev!=Inf]) + 2*pD; DIC
# [1] 1527.059 on MacBook // 1527.059 on server
names(jmod$n.eff)
n.eff.ls <- vector("list")
for(i in 1:length(names(jmod$n.eff))){
if(is.matrix(jmod$n.eff[[i]])){
n.eff.ls[[i]] <- jmod$n.eff[[i]]
} else {
n.eff.ls[[i]] <- summary(jmod$n.eff[[i]])
}
}
names(n.eff.ls) <- names(jmod$n.eff)
n.eff.ls$betazero
n.eff.ls$betaone
n.eff.ls$betatwo
n.eff.ls$betathree
length(jmod$q50$d)
# sub <- c(100:270) # 2min
# sub <- c(180:500); # 1min
sub <- c(350:1000) # 28sec
lo.up <- test[["lo.up"]]; abstr.y <- test[["abstr.y"]]; maxdep <- test[["maxdep"]]
# dev.new()
plot(-jmod$q50$d[sub], type="l", ylab="Posterior mean depth", ylim=c(min(-maxdep), 0))
# lines(-jmod$q50$dproj, col="grey60")
lines(-abstr.y[sub], col=3)
lines(-lo.up[sub,1], col=2); lines(-lo.up[sub,2], col=2)
# legend("bottomright", legend="dive zone limits", lty=1, col=2, bty="n")
legend("bottomleft", legend=c("model","truth","dive zone limits"), text.col=c(1,3,2), bty="n")
# points(2,-240, cex=6, col="orange")
title(paste("DIC = ", paste(round(DIC))))
data.frame(lo.up[sub,], est=jmod$q50$d[sub], true=abstr.y[sub])
dev.new(); hist(stand.values, breaks=15)
dev.new();
for (t in 1:sum(length.ssm.ind)){
par(ask=T)
hist(jmod$sims.list$d[,t], main=paste("point",t,"of",sum(length.ssm.ind)), xlim=c(min(jmod$sims.list$dproj[,t], lo.up[t,1]), max(jmod$sims.list$dproj[,t], lo.up[t,2])), breaks=100)
abline(v=lo.up[t,1], col=2)
abline(v=lo.up[t,2], col=2)
abline(v=abstr.y[t], col=3)
abline(v=jmod$q50$d[t], col=1, lty=2, lwd=2)
}
jmod$parameters
traceplot(jmod, parameters="betathree[1,2]")
require(MCMCpack)
traceplot(jmod, parameters="betathree[1,2]")
traceplot(jmod$sims.list[1], parameters="betathree[1,2]")
traceplot(jmod)
?traceplot
class(jmod)
?mcmc.list
traceplot(mcmc.list(jmod), parameters="betathree[1,2]")
traceplot(as.mcmc.list(jmod), parameters="betathree[1,2]")
find.mode <- function(cc){
sort.int(c(sum(cc==1),sum(cc==2),sum(cc==3)),decreasing=TRUE,index.return=TRUE)$ix[1] 
} # Thank you to Ian Durbach for help with this function 20151014
state.mode <- apply(jmod$sims.list$state,2,find.mode)
state.mean <- apply(jmod$sims.list$state,2,mean); state.mean[1:5]
state.se <- apply(jmod$sims.list$state,2,sd)/sqrt(nrow(jmod$sims.list$state)); state.se[1:5]
plot(-jmod$mean$d[sub], type="l", ylab="Depth (m)"); points(-jmod$mean$d[sub], col=state.mode[sub], pch=16)
legend("bottomleft", legend=c("descent", "bottom", "ascent"), col=c(1,2,3), pch=16, bty="n")
# plot(-jmod$mean$d[sub], type="l")
ls()
head(dive.list)
head(dive.data)
str(d)
ls()
rm(list=ls(()))
rm(list=ls(())
rm(list=ls())
load("/Users/theoniphotopoulou/Dropbox/PUBLICATIONS/04Movement ecology of air breathing divers/squid_server/data_for_squid.RData")
ls()
str(test)
plot(test[[1]]$abstr.y, test[[1]]$abstr.y, pch=1)
str(test)
length(test)
names(test)
dim(test)
length(test)
test[[1]]
test[1]
dim(test$dive.data)
plot(test$abstr.t, test$abstr.y)
plot(test$abstr.y)
plot(-test$abstr.y)
quartz();plot(-test$abstr.y)
quartz();plot(-test$abstr.y, type="b")
quartz();plot(-test$abstr.y, type="l")
points(-test$abstr.y)
plot(-test$abstr.y[1:300], type="l")
points(-test$abstr.y[1:300])
plot(-test$abstr.y[1:600], type="l")
points(-test$abstr.y[1:600])
quartz()
i <- 1; j <- 20
ind.range <- c(tstart[i]:(tstart[j]-1))
par(mfrow=c(2,1), mar=c(4,4,1,1))
plot(jmod$q50$m[1,ind.range], type="l", ylim=c(0,1), col=1) # P(descent)
lines(jmod$q50$m[2,ind.range],col=2) # P(bottom)
lines(jmod$q50$m[3,ind.range], col=3) # P(ascent)
plot(-jmod$q50$d[ind.range], type="l") # depth profile
# working out the modal state
find.mode <- function(cc){
sort.int(c(sum(cc==1),sum(cc==2),sum(cc==3)),decreasing=TRUE,index.return=TRUE)$ix[1]
} # Thank you to Ian Durbach for help with this function 20151014
state.mode <- apply(jmod$sims.list$state,2,find.mode)
state.mean <- apply(jmod$sims.list$state,2,mean); state.mean[1:5]
state.se <- apply(jmod$sims.list$state,2,sd)/sqrt(nrow(jmod$sims.list$state)); state.se[1:5]
points(-jmod$q50$d[ind.range], col=state.mode[ind.range], pch=16) # mean state est
#points(-jmod$q50$d[ind.range], col=3, pch=16) # mean state est
jmod <- jmod.b0123
jmod$mcmc.info$elapsed.mins/60 # 383.0187 hours or 6.383645 days
table(jmod$q50$state)
# check that you are only getting integer states
unique(as.vector(unlist(jmod$sims.list$state)))
table(as.vector(unlist(jmod$sims.list$state)))
#table(as.vector(jmod$sims.list$state[,5]))
names(jmod$q50)
head(jmod$q50$stdd, n=100)
head(jmod$q50$stdd2, n=100)
dim(jmod$q50$m)
jmod$q50$m[,45]
sum(jmod$q50$m[,45]) # smaller than 1 in some cases! :( :( 20170522
range(apply(jmod$q50$m, 2, sum))
which(apply(jmod$q50$m, 2, sum)<0.9)
jmod$q50$m[,23]
load("/Users/theoniphotopoulou/Dropbox/PUBLICATIONS/04Movement ecology of air breathing divers/squid_server/jmod.b0123.RData")
jmod <- jmod.b0123
jmod$mcmc.info$elapsed.mins/60 # 383.0187 hours or 6.383645 days
table(jmod$q50$state)
# check that you are only getting integer states
unique(as.vector(unlist(jmod$sims.list$state)))
table(as.vector(unlist(jmod$sims.list$state)))
#table(as.vector(jmod$sims.list$state[,5]))
names(jmod$q50)
head(jmod$q50$stdd, n=100)
head(jmod$q50$stdd2, n=100)
dim(jmod$q50$m)
jmod$q50$m[,45]
sum(jmod$q50$m[,45]) # smaller than 1 in some cases! :( :( 20170522
range(apply(jmod$q50$m, 2, sum))
which(apply(jmod$q50$m, 2, sum)<0.9)
jmod$q50$m[,23]
quartz()
i <- 1; j <- 20
ind.range <- c(tstart[i]:(tstart[j]-1))
par(mfrow=c(2,1), mar=c(4,4,1,1))
plot(jmod$q50$m[1,ind.range], type="l", ylim=c(0,1), col=1) # P(descent)
lines(jmod$q50$m[2,ind.range],col=2) # P(bottom)
lines(jmod$q50$m[3,ind.range], col=3) # P(ascent)
plot(-jmod$q50$d[ind.range], type="l") # depth profile
# working out the modal state
find.mode <- function(cc){
sort.int(c(sum(cc==1),sum(cc==2),sum(cc==3)),decreasing=TRUE,index.return=TRUE)$ix[1]
} # Thank you to Ian Durbach for help with this function 20151014
state.mode <- apply(jmod$sims.list$state,2,find.mode)
state.mean <- apply(jmod$sims.list$state,2,mean); state.mean[1:5]
state.se <- apply(jmod$sims.list$state,2,sd)/sqrt(nrow(jmod$sims.list$state)); state.se[1:5]
points(-jmod$q50$d[ind.range], col=state.mode[ind.range], pch=16) # mean state est
#points(-jmod$q50$d[ind.range], col=3, pch=16) # mean state est
load("/Users/theoniphotopoulou/Dropbox/PUBLICATIONS/04Movement ecology of air breathing divers/squid_server/data_for_squid.RData")
load("/Users/theoniphotopoulou/Dropbox/PUBLICATIONS/04Movement ecology of air breathing divers/squid_server/jmod.b014.RData")
library(rjags); library(MCMCpack); library(plyr); library(foreach)
library(jagsUI); library(data.table)
ls()
jmod <- jmod.b014
jmod$mcmc.info$elapsed.mins/60 # 254.3294 hours
jmod$mcmc.info$elapsed.mins/60/24
jmod$mcmc.info$elapsed.mins/60*24
jmod$mcmc.info$elapsed.mins/60/24
jmod$mcmc.info$elapsed.mins/(60*24)
quartz()
i <- 55; j <- 65
ind.range <- c(tstart[i]:(tstart[j]-1))
par(mfrow=c(2,1), mar=c(4,4,1,1))
plot(jmod$q50$m[1,ind.range], type="l", ylim=c(0,1), col=1) # P(descent)
lines(jmod$q50$m[2,ind.range],col=2) # P(bottom)
lines(jmod$q50$m[3,ind.range], col=3) # P(ascent)
plot(-jmod$q50$d[ind.range], type="l") # depth profile
# working out the modal state
find.mode <- function(cc){
sort.int(c(sum(cc==1),sum(cc==2),sum(cc==3)),decreasing=TRUE,index.return=TRUE)$ix[1]
} # Thank you to Ian Durbach for help with this function 20151014
state.mode <- apply(jmod$sims.list$state,2,find.mode)
state.mean <- apply(jmod$sims.list$state,2,mean); state.mean[1:5]
state.se <- apply(jmod$sims.list$state,2,sd)/sqrt(nrow(jmod$sims.list$state)); state.se[1:5]
points(-jmod$q50$d[ind.range], col=state.mode[ind.range], pch=16) # mean state est
#points(-jmod$q50$d[ind.range], col=3, pch=16) # mean state est
summary(stnd.oxyproxy)
summary(stdd2)
summary(oxyproxy)
summary(sttd)
summary(stdd)
head(data)
summary(sd.d)
-log(0.0001)
log(0.0001)
log(0.00001)
-Inf
-1E5
getwd()
2998-129.5-240.06-23.6
load((file="/Users/theoniphotopoulou/Dropbox/PROPOSALS_APPLICATIONS/2017SCHVRB/expenses.RData"))
ls()
file
flights
flights <- 1401.04
food010917 <- 11.2+12.07+1.3+2.5+8.95+11.30+7.6+24-9.99-6.99
food010917
save.image(file="/Users/theoniphotopoulou/Dropbox/PROPOSALS_APPLICATIONS/2017SCHVRB/expenses.RData")
ls()
2998-food010917-food200817-travel200817-travelinsurance
food010917+food200817+travel200817+travelinsurance
2998-food010917-food200817-travel200817-travelinsurance-700
350/4
88*4
88*7
90*7
90*8
90*7
90/30
3*51
90/7
13*51
90*4
907
90*7
90/7
13*51
as.Date("2017-08-04")
as.Date("2017-08-04")-as.Date("2017-09-24")
13*7
91*4
91*7
13*5
13*51
setwd("/Users/theoniphotopoulou/Dropbox/RLadies/meetup-presentations_capetown/2017-10-16_DataTransformation")
load("data/movielens-small.RData")
library(tidyverse)
ratings <- left_join(ratings, movies, by="movieId")
print(ratings)
ratings <- as.tibble(ratings)
ratings <- left_join(ratings, movies, by="movieId")
print(ratings)
names(ratings)
load("data/movielens-small.RData")
ratings <- as.tibble(ratings)
print(ratings)
print(ratings)
ratings1 <- left_join(ratings, movies, by="movieId")
print(ratings1)
names(ratings1)
names(movies)
ratings2 <- left_join(movies, ratings, by="movieId")
names(ratings2)
ratings3 <- right_join(ratings, movies, by="movieId")
names(ratings3)
glimpse(ratings1)
glimpse(ratings3)
u1_likes <- ratings %>% filter(userId == 1) %>% filter(rating > 3)
u1_likes
arrange(u1_likes, desc(rating))
u1_likes %>% arrange(desc(rating))
u1_likes %>% arrange(rating) %>% desc(rating)
u1_likes %>% arrange(rating) %>% desc(r)
u1_likes %>% arrange(rating) %>% desc()
mutate(u1_likes, this_is = "trivial")
glimpse(u1_likes)
mutate(u1, like = ifelse(rating > 3, 1, 0))
```
mutate(u1_likes, like = ifelse(rating > 3, 1, 0))
ratings_by_user <- group_by(ratings, userId)
glimpse(ratings)
glimpse(ratings_by_user)
print(ratings)
print(ratings_by_user)
test <- ratings %>%
group_by(userId) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
head(10) %>%     # take first ten rows
t()
test
test[,1]
ratings %>% group_by(userId) %>% filter(rank(desc(rating)) < 2)
test <- ratings %>% group_by(userId) %>% filter(rank(desc(rating)) < 2)
summary(test$rating)
table(test$rating)
test1 <- ratings %>% group_by(userId) %>% filter(desc(rating) < 2)
test1
table(test1$rating)
users_frq <- ratings %>% group_by(userId) %>% summarize(count = n()) %>% arrange(desc(count))
my_users <- users_frq$userId[101:115]
movies_frq <- ratings %>% group_by(movieId) %>% summarize(count = n()) %>% arrange(desc(count))
my_movies <- movies_frq$movieId[101:120]
my_users
my_movies
ratings_red <- ratings %>% filter(userId %in% my_users, movieId %in% my_movies)
print(ratings_red)
n_users <- length(unique(ratings_red$userId))
n_movies <- length(unique(ratings_red$movieId))
n_users
n_movies
ratings_red <- ratings %>% filter(userId %in% my_users, movieId %in% my_movies)
# and check there are 15 users and 20 movies in the reduced dataset
n_users <- length(unique(ratings_red$userId))
n_movies <- length(unique(ratings_red$movieId))
print(paste("number of users is", n_users))
print(paste("number of movies is", n_movies))
print(paste("number of users is", n_users))
movies %>% filter(movieId %in% my_movies) %>% select(title)
head(levels(ratings_red$title), 10)
head(levels(ratings_red$title), 10)ratings_red <- ratings %>% filter(userId %in% my_users, movieId %in% my_movies)
ratings_red <- ratings %>% filter(userId %in% my_users, movieId %in% my_movies)
movies %>% filter(movieId %in% my_movies) %>% select(title)
head(levels(ratings_red$title), 10)
names(ratings_red)
ratings_red
ratings_red <- droplevels(ratings_red)
levels(ratings_red$title)
